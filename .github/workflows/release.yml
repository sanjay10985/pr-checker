name: Release

on:
  push:
    branches:
      - main # Trigger when pushing to main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to get previous tags

      - name: Get Latest Tag
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 --always 2>/dev/null || echo "0.0.0")
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "Last tag found: $LAST_TAG"

      - name: Get Current Version from package.json
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version: $VERSION"

      - name: Get Last Tag Commit Date
        id: last_tag_date
        run: |
          LAST_TAG_DATE=$(git log -1 --format=%aI ${{ env.LAST_TAG }} 2>/dev/null || echo "")
          echo "LAST_TAG_DATE=$LAST_TAG_DATE" >> $GITHUB_ENV
          echo "Last tag commit date: $LAST_TAG_DATE"

      - name: Generate Release Notes
        run: |
          echo "### ðŸš€ Release Notes for v${{ env.VERSION }}" > release-notes.md
          echo "" >> release-notes.md
          echo "#### Merged PRs:" >> release-notes.md
          echo "" >> release-notes.md

          # Get list of merged PRs since the last release
          gh api graphql -f query='
            {
              repository(owner: "${{ github.repository_owner }}", name: "'$(basename $GITHUB_REPOSITORY)'") {
                pullRequests(first: 100, states: MERGED, orderBy: {field: UPDATED_AT, direction: DESC}) {
                  nodes {
                    number
                    title
                    body
                    mergedAt
                  }
                }
              }
            }' \
          --jq '.data.repository.pullRequests.nodes | map(select(.mergedAt > "${{ env.LAST_TAG_DATE }}")) | .[] | "- **\(.title)** ([#\(.number)])\n  \(.body // "No description provided.")"' \
          >> release-notes.md

          echo "Generated release notes:"
          cat release-notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
